import React, {useEffect, useMemo, useState} from 'react';
import {View, StyleSheet, Alert, FlatList} from 'react-native';
import NumberContainer from '../components/NumberContainer';
import Title from '../components/Title';
import PrimaryButton from '../components/PrimaryButton';
import Card from '../components/Card';
import GuessLogItem from '../components/GuessLogItem';
import Subtitle from '../components/SubTitle';
import {Ionicons} from '@expo/vector-icons';

type GameScreenProps = {
  userNumber: number;
  onGameOver: (roundsCound: number) => void;
};

let minGuessBoundary = 1;
let maxGuessBoundary = 100;

function GameScreen(props: GameScreenProps) {
  const initialGuess = useMemo(() => {
    return generateRandomBetween(minGuessBoundary, maxGuessBoundary, [
      props.userNumber,
    ]);
  }, [props.userNumber]);
  const [currentGuess, setCurrentGuess] = useState(initialGuess);
  const [guessRounds, setGuessRounds] = useState<number[]>([]);

  useEffect(() => {
    if (currentGuess === props.userNumber) {
      props.onGameOver(guessRounds.length);
    }
  }, [currentGuess, guessRounds, props]);

  useEffect(() => {
    /*
     * minGuessBoundary and maxGuessBoundary are not created within the component.
     * Therefore when we restart a game, they need to be reset back to original values.
     */
    minGuessBoundary = 1;
    maxGuessBoundary = 100;
  }, []);

  function nextGuessHandler(direction: 'lower' | 'greater') {
    /* Logic to make sure the user is not cheating */
    if (
      (direction === 'lower' && currentGuess < props.userNumber) ||
      (direction === 'greater' && currentGuess > props.userNumber)
    ) {
      Alert.alert("Don't Lie!", 'You know that this is wrong...', [
        {
          text: 'Sorry!',
          style: 'cancel',
        },
      ]);
      return;
    }

    if (direction === 'lower') {
      maxGuessBoundary = currentGuess;
    } else {
      /* We add + 1 here because the value generated by Math.random() is inclusive to the min range value [0, 1) */
      minGuessBoundary = currentGuess + 1;
    }

    const newRandomNumber = generateRandomBetween(
      minGuessBoundary,
      maxGuessBoundary,
      [currentGuess],
    );
    setCurrentGuess(newRandomNumber);
    setGuessRounds((prev) => [...prev, newRandomNumber]);
  }

  return (
    <View style={styles.screen}>
      <Title title="Opponent's Guess" />
      <NumberContainer text={currentGuess} />
      <Card>
        <Subtitle style={styles.instructionText}>Higher or lower?</Subtitle>
        <View style={styles.buttonsContainer}>
          <View style={styles.buttonContainer}>
            <PrimaryButton onPress={() => nextGuessHandler('greater')}>
              <Ionicons name="md-add" size={24} color="white" />
            </PrimaryButton>
          </View>
          <View style={styles.buttonContainer}>
            <PrimaryButton onPress={() => nextGuessHandler('lower')}>
              <Ionicons name="md-remove" size={24} color="white" />
            </PrimaryButton>
          </View>
        </View>
      </Card>
      <View style={styles.listContainer}>
        <FlatList
          data={guessRounds}
          renderItem={(data) => (
            <GuessLogItem roundCount={data.index + 1} value={data.item} />
          )}
          keyExtractor={(_item, index) => index.toString()}
        />
      </View>
    </View>
  );
}

export default GameScreen;

const styles = StyleSheet.create({
  screen: {
    flex: 1,
    padding: 24,
    top: '5%',
  },
  instructionText: {
    marginBottom: 12,
  },
  buttonsContainer: {
    flexDirection: 'row',
  },
  buttonContainer: {
    flex: 1,
  },
  listContainer: {
    flex: 1,
    padding: 16,
  },
});

function generateRandomBetween(min: number, max: number, exclude: number[]) {
  const randomNumber = Math.floor(Math.random() * (max - min)) + min;

  if (exclude.find((number) => number === randomNumber)) {
    return generateRandomBetween(min, max, exclude);
  } else {
    return randomNumber;
  }
}
